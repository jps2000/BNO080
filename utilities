Utilities (Quaternion mathematics)

  (q0,q1,q2,q3) = (w,ix,jy,kz)
  
  q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3  = 1

// Fast inverse square-root see Lomont C. 2003  fast inverse square root Purdue Univ
float invSqrt(float x)
{
float xhalf = 0.5f*x;
int i = *(int*)&x;      // get bits for floating value
i = 0x5f375a86- (i>>1); // gives initial guess y0
x = *(float*)&i;        // convert bits back to float
x = x*(1.5f-xhalf*x*x); // Newton step, repeating increases accuracy
return x;
}


// normalize vector
template<typename T>
static inline void normalizeVector(T& vx, T& vy, T& vz)
{
  T recipNorm = invSqrt (vx * vx + vy * vy + vz * vz);
  vx *= recipNorm;
  vy *= recipNorm;
  vz *= recipNorm;
}

// normalize quat
template<typename T>
static inline void normalizeQuaternion(T& q0, T& q1, T& q2, T& q3)
{
  T recipNorm = invSqrt (q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
  q0 *= recipNorm;
  q1 *= recipNorm;
  q2 *= recipNorm;
  q3 *= recipNorm;
} 
 
   
 // Gravity vector from quaternion
  
  gx = q1 * q3 - q0 * q2;
  gy = q0 * q1 + q2 * q3;
  gz = q0 * q0 + q3 * q3 -0.5f; 
  norm = sqrtf(gx * gx + gy * gy + gz * gz);                                                              
  norm = 1.0f / norm;
  gx *= norm; gy *= norm; gz *= norm;
 
 
 # Rotation matrix (half)
  (R00 R10 R20)
 =(R01 R11 R21)
  (R02 R12 R22)
  
 R00 = q0 * q0 + q1 * q1 -0.5f; // = 0.5f - q2 * q2 - q3 * q3;
 R01 = q1 * q2 - q0 * q3;
 R02 = q1 * q3 + q0 * q2;
 R10 = q1 * q2 + q0 * q3;
 R11 = q0 * q0 + q2 * q2 -0.5; // = 0.5f - q1 * q1 - q3 * q3;
 R12 = q2 * q3 - q0 * q1;
 R20 = q1 * q3 - q0 * q2;
 R21 = q2 * q3 + q0 * q1;
 R22 = q0 * q0 + q3 * q3 -0.5f; // = 0.5f -q1 * q1 -q2 * q2;
 
 To rotate a vector V = (vx,vx,vz) in quaternion frame
 
 W = (wx,wy,wz) 
 wx = 2.0f * ( R00 * vx + R10 * vy + R20 * vz);
 wy = 2.0f * ( R01 * vx + R11 * vy + R21 * vz):
 wz = 2.0f * ( R02 * vx + R12 * vy + R22 * vz):
 For example gravity vector  g = (0,0,1)  --> G = (gx,gy,gz) = (R20, R21, R22)
 # Euler angles from rotation matrix:
 
 yaw   =  atan2f(R10 , R00);                    // heading
 pitch =  -  asinf(R20); =  -  asinf(gx);
 roll  =  atan2f(R21 , R22); = atan2f(gy , gz);
 
  
 # Euler angles from quaternions 
 
 yaw   =  atan2f(q1 * q2 +q0 * q3, q0 * q0 + q1 * q1 - 0.5f);   // heading
 pitch =  -  asinf(2.0f * (q1 * q3 - q0 * q2));
 roll  =  atan2f(q0 * q1 + q2 * q3, q0 * q0 + q3 * q3 - 0.5f);
 
  
 yaw += PI * 0.5f;                                               // correction of the y axis direction if needed
 if(yaw < 0) yaw += 2.0f * PI;
 if(yaw > 2.0f *PI) yaw -= 2.0f * PI;  
  
 yaw   *= radtodeg;
 yaw    = 360.0f - yaw;                         // correction of the y axis direction if needed; apply location offset also here
 pitch *= radtodeg;
 roll  *= radtodeg;
//***********************************************************************************
// from Diebel James (2006), Representing Attitude: Euler Angles, Unit Quaternions, and Rotation  Vectors Stanford University

//Euler Angle Sequence (1,2,1)
yaw = atan2(R21, R31);
pitch = acos(2.0 * R11);
roll = atan2(R12, -R13);

//Euler Angle Sequence (1,2,3)  (this is the same as above) *************** Cardan angles,  Tait- Bryan angles, nautical angles, pointing forward along x axis
yaw = atan2(R23, R33);
pitch = -asin(2.0 * R13);
roll = atan2(R12, R11);

//Euler Angle Sequence (1,3,1)
yaw = atan2(R31,-R21);
pitch = acos(2.0 * R11);
roll = atan2(R13, R12);

//Euler Angle Sequence (1,3,2)
yaw = atan2(-R32, R22);
pitch = asin(2.0 * R12);
roll = atan2(-R13, R11);

//Euler Angle Sequence (2,1,2)
yaw = atan2(R12,-R32);
pitch = acos(2.0 * R22);
roll = atan2(R21, R23);

//Euler Angle Sequence (2,1,3)
yaw = atan2(-R13, R33);
pitch = asin(2.0 * R23);
roll = atan2(-R21, R22);

//Euler Angle Sequence (2,3,1)
yaw = atan2(R31, R11);
pitch = -asin(2.0 * R21);
roll = atan2(R23, R22);

//Euler Angle Sequence (2,3,2)
yaw = atan2(R32, R12);
pitch = acos(2.0 * R22);
roll = atan2(R23, -R21);

//Euler Angle Sequence (3,1,2)
yaw = atan2(R12, R22);
pitch = -asin(2.0 * R32);
roll = atan2(R31, R33);

//Euler Angle Sequence (3,1,3) ********************* x convention , Euler angles
yaw = atan2(R13, R23);
pitch = acos(2.0 * R33);
roll = atan2(R31, -R32);

//Euler Angle Sequence (3,2,1)
yaw = atan2(-R21, R11);
pitch = asin(2.0 * R31);
roll = atan2(-R32, R33);

//Euler Angle Sequence (3,2,3) *********************

yaw = atan2(R23, -R13);
pitch = acos(2.0 * R33);
roll = atan2(R32, R31);


//***********************************************************************************

TARE (to make qt = 1,0,0,0) from q = (q0,q1,q2,q3)
//store  konjugate komplex quat  (*-1 of i, j, k) at the moment of TARE
    t0 = q0;                                                                        
    t1 = -q1;
    t2 = -q2;
    t3 = -q3;
// qt are then the tared coefficients
  qt0 = q0 * t0 - q1 * t1 - q2 * t2 - q3 * t3;      // multiplication matrix
  qt1 = q0 * t1 + q1 * t0 + q2 * t3 - q3 * t2;
  qt2 = q0 * t2 - q1 * t3 + q2 * t0 + q3 * t1;
  qt3 = q0 * t3 + q1 * t2 - q2 * t1 + q3 * t0;

// Multiplication with  a quaternion having a negative sign on one or two axes undo a rotation around these axes


alternative:
//store quats at the moment of TARE
    t0 = q0;                                                                        
    t1 = q1;
    t2 = q2;
    t3 = q3;
  // qt are the tared coefficients
  qt0 =  q0 * t0 + q1 * t1 + q2 * t2 + q3 * t3;    // konjugated multiplication matrix t1, t2, t3 negative sign
  qt1 = -q0 * t1 + q1 * t0 - q2 * t3 + q3 * t2; 
  qt2 = -q0 * t2 + q1 * t3 + q2 * t0 - q3 * t1;
  qt3 = -q0 * t3 - q1 * t2 + q2 * t1 + q3 * t0;
 // Quaternion Qt(1,0,0,0) leads to gravity G = (0, 0, 1) (see formula for gravity)
 // Hence the angle of the sensor  to gravity after tare (any orientation) is the dot product between the unity
 // vectors (0,0,1) and (gx,gy,gz) which is 
 
  PHI = acos(gz);       //  angle of the cone
  PHI *= 180.0f / PI;
  
//*************************************************************************************
//Angle between quaternions
float dotproduct = Q0 * q0 + Q1 * q1 + Q2 * q2 + Q3 * q3;
float angle = radtodeg * 2.0f * acos(dotproduct);
//*************************************************************************************Jizhong XiaoJizhong Xiao
     //**************** dphi calculation************
      float argument = (QT0 * Q0 + QT1 * Q1 + QT2 * Q2 + QT3 * Q3);  // calculate delta angle to previous sample
      if (abs(argument) > 1) argument = 1.0f;                        // check for N/A
     
      if(asin(argument) > 0) dphi = 2.0f * acos(argument);             
      else dphi = 2.0f * (PI - acos(argument));                      // in case rotation is >360 deg  ( quat flip signs)
     
      dphi *= radtodeg;                                              // conversion to deg
      if(dphi < 1.4f) dphi = 0.0f;                                   // Noise cancelling (empirical value)
      //*********************************************

The quaternion conjugate (q1,q2,q3 *=-1.0f) can be used to swap the relative frames described by an orientation (Madgwick paper page 4).
Quats  are given as Sensor frame. The konjugates are then the quats from  global frame. To calculate  eulers from the latter are  different.
For some applications these are the appropriate ones. 





